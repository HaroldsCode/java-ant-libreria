package libreria.vista;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import libreria.constructor.Producto;
import libreria.constructor.Venta;
import libreria.persistencia.Conexion;

public class GestionarVenta extends javax.swing.JPanel {

  Conexion con;
  ArrayList<Producto> productos;
  ArrayList<Producto> orden;
  
  Producto producto;
  Producto productoEliminar;
  
  DefaultTableModel modeloProductos;
  DefaultTableModel modeloOrden;
  
  public GestionarVenta() {
    con = new Conexion();
    productos = new ArrayList<>();
    orden = new ArrayList<>();
    
    initComponents();
    
    productos.addAll(con.producto.listadoProductos());
    
    producto = null;
    productoEliminar = null;
    
    modeloProductos = (DefaultTableModel) tablaProductosBuscador.getModel();
    modeloOrden = (DefaultTableModel) tablaOrden.getModel();
    
    textoCantidad.setText("0");
    
    botonCancelar.setVisible(!orden.isEmpty());
    botonVender.setVisible(!orden.isEmpty());
    botonEliminar.setVisible( productoEliminar != null);
    controlBotonesCantidad();
    cargarTabla();
  }
  
  private void cargarTabla (){
    for (int i = 0; i < tablaProductosBuscador.getRowCount(); i++) {
      modeloProductos.removeRow(i);
      i-=1;
    }
    
    for ( Producto pro : productos ) {
      if ( ( pro.getCantidad() - buscarOrden( pro.getId() ) ) > 0 ) {
        modeloProductos.addRow( new Object[] {
          pro.getId(),
          pro.getNombre(),
          pro.getCantidad() - buscarOrden( pro.getId() ),
          pro.getPrecio()
        } );
      }
    }
  }
  
  private void cargarTabla ( String nombre ){
    for (int i = 0; i < tablaProductosBuscador.getRowCount(); i++) {
      modeloProductos.removeRow(i);
      i-=1;
    }
    
    for ( Producto pro : productos ) {
      if ( ( pro.getCantidad() - buscarOrden( pro.getId() ) ) > 0 && pro.getNombre().toLowerCase().contains(nombre)) {
        modeloProductos.addRow( new Object[] {
          pro.getId(),
          pro.getNombre(),
          pro.getCantidad() - buscarOrden( pro.getId() ),
          pro.getPrecio()
        } );
      }
    }
  }
  
  private void cargarOrden (){
    for (int i = 0; i < tablaOrden.getRowCount(); i++) {
      modeloOrden.removeRow(i);
      i-=1;
    }
    for ( Producto pro : orden ) {
      modeloOrden.addRow( new Object[] {
        pro.getId(),
        pro.getNombre(),
        pro.getCantidad(),
        pro.getPrecio()
      } );
    }
  }
  
  private void controlBotonesCantidad(){
    textoCantidad.setVisible( producto != null );
    botonMas.setVisible( producto != null );
    botonMenos.setVisible( producto != null );
    botonAgregar.setVisible( producto != null );
  }

  private int buscarOrden ( int id ) {
    if ( orden.isEmpty() ) return 0;
    for ( Producto pro : orden ) {
      if ( pro.getId() == id ) {
        return pro.getCantidad();
      } 
    }    
    return 0;
  }
  
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    textoBusqueda = new javax.swing.JTextField();
    jScrollPane1 = new javax.swing.JScrollPane();
    tablaProductosBuscador = new javax.swing.JTable();
    botonMenos = new javax.swing.JButton();
    textoCantidad = new javax.swing.JTextField();
    botonMas = new javax.swing.JButton();
    botonAgregar = new javax.swing.JButton();
    jSeparator1 = new javax.swing.JSeparator();
    jLabel1 = new javax.swing.JLabel();
    botonVender = new javax.swing.JButton();
    botonCancelar = new javax.swing.JButton();
    jScrollPane2 = new javax.swing.JScrollPane();
    tablaOrden = new javax.swing.JTable();
    botonEliminar = new javax.swing.JButton();

    setBackground(new java.awt.Color(246, 246, 246));
    setMaximumSize(new java.awt.Dimension(827, 520));
    setMinimumSize(new java.awt.Dimension(827, 520));
    setPreferredSize(new java.awt.Dimension(827, 520));

    textoBusqueda.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        textoBusquedaKeyReleased(evt);
      }
    });

    tablaProductosBuscador.setAutoCreateRowSorter(true);
    tablaProductosBuscador.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {

      },
      new String [] {
        "Id", "Nombre", "Cantidad", "Precio"
      }
    ) {
      Class[] types = new Class [] {
        java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Float.class
      };
      boolean[] canEdit = new boolean [] {
        false, false, false, false
      };

      public Class getColumnClass(int columnIndex) {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
      }
    });
    tablaProductosBuscador.getTableHeader().setResizingAllowed(false);
    tablaProductosBuscador.getTableHeader().setReorderingAllowed(false);
    tablaProductosBuscador.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        tablaProductosBuscadorMouseClicked(evt);
      }
    });
    jScrollPane1.setViewportView(tablaProductosBuscador);
    if (tablaProductosBuscador.getColumnModel().getColumnCount() > 0) {
      tablaProductosBuscador.getColumnModel().getColumn(0).setResizable(false);
      tablaProductosBuscador.getColumnModel().getColumn(0).setPreferredWidth(15);
      tablaProductosBuscador.getColumnModel().getColumn(1).setResizable(false);
      tablaProductosBuscador.getColumnModel().getColumn(1).setPreferredWidth(150);
      tablaProductosBuscador.getColumnModel().getColumn(2).setResizable(false);
      tablaProductosBuscador.getColumnModel().getColumn(2).setPreferredWidth(20);
      tablaProductosBuscador.getColumnModel().getColumn(3).setResizable(false);
      tablaProductosBuscador.getColumnModel().getColumn(3).setPreferredWidth(40);
    }

    botonMenos.setText("-");
    botonMenos.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        botonMenosActionPerformed(evt);
      }
    });

    textoCantidad.setEditable(false);
    textoCantidad.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    textoCantidad.setText("1");

    botonMas.setText("+");
    botonMas.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        botonMasActionPerformed(evt);
      }
    });

    botonAgregar.setText("Agregar a la factura");
    botonAgregar.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        botonAgregarActionPerformed(evt);
      }
    });

    jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

    jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
    jLabel1.setText("Factura");

    botonVender.setText("Vender");
    botonVender.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        botonVenderActionPerformed(evt);
      }
    });

    botonCancelar.setText("Cancelar");
    botonCancelar.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        botonCancelarActionPerformed(evt);
      }
    });

    tablaOrden.setAutoCreateRowSorter(true);
    tablaOrden.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {

      },
      new String [] {
        "Id", "Nombre", "Cantidad", "Precio"
      }
    ) {
      Class[] types = new Class [] {
        java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Float.class
      };
      boolean[] canEdit = new boolean [] {
        false, false, false, false
      };

      public Class getColumnClass(int columnIndex) {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
      }
    });
    tablaOrden.setMaximumSize(new java.awt.Dimension(225, 0));
    tablaOrden.setMinimumSize(new java.awt.Dimension(225, 0));
    tablaOrden.getTableHeader().setResizingAllowed(false);
    tablaOrden.getTableHeader().setReorderingAllowed(false);
    tablaOrden.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        tablaOrdenMouseClicked(evt);
      }
    });
    jScrollPane2.setViewportView(tablaOrden);
    if (tablaOrden.getColumnModel().getColumnCount() > 0) {
      tablaOrden.getColumnModel().getColumn(0).setResizable(false);
      tablaOrden.getColumnModel().getColumn(0).setPreferredWidth(25);
      tablaOrden.getColumnModel().getColumn(1).setResizable(false);
      tablaOrden.getColumnModel().getColumn(1).setPreferredWidth(150);
      tablaOrden.getColumnModel().getColumn(2).setResizable(false);
      tablaOrden.getColumnModel().getColumn(2).setPreferredWidth(40);
      tablaOrden.getColumnModel().getColumn(3).setResizable(false);
      tablaOrden.getColumnModel().getColumn(3).setPreferredWidth(40);
    }

    botonEliminar.setText("Eliminar");
    botonEliminar.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        botonEliminarActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(botonMenos, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(textoCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(botonMas, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(87, 87, 87)
            .addComponent(botonAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(textoBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addGap(9, 9, 9)
        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(6, 6, 6)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
            .addGap(22, 22, 22)
            .addComponent(botonCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(botonVender, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE))
          .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
          .addComponent(botonEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addGap(8, 8, 8))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE)
          .addGroup(layout.createSequentialGroup()
            .addComponent(textoBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(botonMas, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(botonAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
              .addComponent(textoCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(botonMenos, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(botonCancelar)
              .addComponent(botonVender)
              .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(botonEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addGap(3, 3, 3))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void textoBusquedaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textoBusquedaKeyReleased
    producto = null;
    String nombre = textoBusqueda.getText().trim();
    cargarTabla(nombre.toLowerCase());
    textoCantidad.setText("1");
    controlBotonesCantidad();
  }//GEN-LAST:event_textoBusquedaKeyReleased

  private void tablaProductosBuscadorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaProductosBuscadorMouseClicked
    textoCantidad.setText("0");
    int id = (int) modeloProductos.getValueAt(tablaProductosBuscador.getSelectedRow(), 0);
    Producto temporal = con.producto.consultarProductoPorId(id);
    producto = new Producto(
      temporal.getId(),
      temporal.getEditorial(),
      temporal.getAutor(),
      temporal.getNombre(),
      temporal.getAnho(),
      temporal.getCantidad(),
      temporal.getPrecio()
    );
    controlBotonesCantidad();
  }//GEN-LAST:event_tablaProductosBuscadorMouseClicked

  private void botonMenosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMenosActionPerformed
    int cantidad = Integer.parseInt(textoCantidad.getText().trim()) - 1;
    if ( cantidad > 0 ) {
      textoCantidad.setText(""+cantidad);
    }
  }//GEN-LAST:event_botonMenosActionPerformed

  private void botonMasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMasActionPerformed
    int cantidad = Integer.parseInt(textoCantidad.getText().trim()) + 1, cantTemp = 0;
    
    if ( orden.isEmpty() ) {
      if ( cantidad <= producto.getCantidad() ) {
        textoCantidad.setText(""+cantidad);
      }
      return;
    } 
        
    for ( Producto pro : orden ) {
      if ( producto.getId() == pro.getId() ) {
        cantTemp = producto.getCantidad() - pro.getCantidad();
      }
    }      

    if ( cantTemp == 0 && cantidad <= producto.getCantidad() ){
      textoCantidad.setText(""+cantidad);
      return;
    }
    if ( cantidad <= cantTemp ) textoCantidad.setText(""+cantidad);
  }//GEN-LAST:event_botonMasActionPerformed

  private void botonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgregarActionPerformed
    boolean repetido = false;
    
    if ( textoCantidad.getText().equals("0") ) return;
    
    for ( Producto pro : orden ) {
      if ( producto.getId() == pro.getId() ) {
        repetido = true;
      }
    }
        
    if ( repetido ) {
      for ( Producto pro : orden ) {
        if ( producto.getId() == pro.getId() ) {
          double precioUnitario  = pro.getPrecio() / pro.getCantidad();
          pro.setCantidad( pro.getCantidad() + Integer.parseInt( textoCantidad.getText().trim() ) );
          pro.setPrecio( precioUnitario * pro.getCantidad() );
        }
      }
    } else {
      producto.setCantidad( Integer.parseInt( textoCantidad.getText().trim() ) );
      producto.setPrecio( producto.getPrecio() * producto.getCantidad() );
      orden.add(producto);
    }
    
    producto = null;
    botonVender.setVisible(!orden.isEmpty());
    botonCancelar.setVisible(!orden.isEmpty());
    textoBusqueda.setText("");
    textoCantidad.setText("1");
    cargarOrden();
    cargarTabla();
    controlBotonesCantidad();
  }//GEN-LAST:event_botonAgregarActionPerformed

  private void botonVenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonVenderActionPerformed
    if ( JOptionPane.showConfirmDialog(this, "Confirmar venta", "",JOptionPane.YES_NO_OPTION ) != 0 ) return;
    double total = 0.0;
    
    for ( Producto pro : orden ) {
      for ( Producto data : con.producto.listadoProductos() ) {
        if ( pro.getId() == data.getId() ) {
          data.setCantidad( data.getCantidad() - pro.getCantidad() );
          con.producto.actualizarProducto(data);
        }
      }
    }
    for ( Producto pro : orden ) total += pro.getPrecio();
    
    con.venta.guardarVenta( new Venta ( 0, orden, "",total ) );
    
    orden.clear();
    productos.clear();
    
    productoEliminar = null;
    producto = null;
    
    textoBusqueda.setText("");
    productos.addAll( con.producto.listadoProductos() );
    
    botonEliminar.setVisible( productoEliminar != null);
    botonVender.setVisible(!orden.isEmpty());
    botonCancelar.setVisible(!orden.isEmpty());
    
    cargarTabla();
    controlBotonesCantidad();
    cargarOrden();
  }//GEN-LAST:event_botonVenderActionPerformed

  private void tablaOrdenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaOrdenMouseClicked
    int id = (int) modeloOrden.getValueAt(tablaOrden.getSelectedRow(), 0);
    for ( Producto temporal : orden ) {
      if ( temporal.getId() == id ){
        productoEliminar = new Producto(
          temporal.getId(),
          temporal.getEditorial(),
          temporal.getAutor(),
          temporal.getNombre(),
          temporal.getAnho(),
          temporal.getCantidad(),
          temporal.getPrecio()
        );
      }
    }
    
    botonEliminar.setVisible( productoEliminar != null);
  }//GEN-LAST:event_tablaOrdenMouseClicked

  private void botonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarActionPerformed
    if ( JOptionPane.showConfirmDialog(this, "¿Desea eliminar el libro de su orden?", "",JOptionPane.YES_NO_OPTION ) != 0 ) return;
    ArrayList<Producto> temporal = new ArrayList<>();
    
    for ( Producto pro : orden ) {
      if ( pro.getId() != productoEliminar.getId() ){
        temporal.add(pro);
      }
    }
    
    orden.clear();
    orden.addAll(temporal);
        
    productoEliminar = null;
    producto = null;
    
    textoBusqueda.setText("");
    
    botonEliminar.setVisible( productoEliminar != null);
    botonVender.setVisible(!orden.isEmpty());
    botonCancelar.setVisible(!orden.isEmpty());
    
    cargarTabla();
    controlBotonesCantidad();
    cargarOrden();
  }//GEN-LAST:event_botonEliminarActionPerformed

  private void botonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCancelarActionPerformed
    if ( JOptionPane.showConfirmDialog(this, "¿Desea cancelar la venta?", "",JOptionPane.YES_NO_OPTION ) != 0 ) return;
    orden.clear();
    productos.clear();
    
    productoEliminar = null;
    producto = null;
    
    textoBusqueda.setText("");
    productos.addAll( con.producto.listadoProductos() );
    
    botonEliminar.setVisible( productoEliminar != null);
    botonVender.setVisible(orden.size() != 0 );
    botonCancelar.setVisible(orden.size() != 0 );
    
    cargarTabla();
    controlBotonesCantidad();
    cargarOrden();
  }//GEN-LAST:event_botonCancelarActionPerformed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton botonAgregar;
  private javax.swing.JButton botonCancelar;
  private javax.swing.JButton botonEliminar;
  private javax.swing.JButton botonMas;
  private javax.swing.JButton botonMenos;
  private javax.swing.JButton botonVender;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JSeparator jSeparator1;
  private javax.swing.JTable tablaOrden;
  private javax.swing.JTable tablaProductosBuscador;
  private javax.swing.JTextField textoBusqueda;
  private javax.swing.JTextField textoCantidad;
  // End of variables declaration//GEN-END:variables
}
